select product_id from Products where low_fats = 'Y' and recyclable = 'Y'
select name from Customer where referee_id !='2' or referee_id is null
select name, population, area from World where area >= 3000000 or population >=25000000
select distinct author_id as id from Views where author_id = viewer_id order by id
select name from customer where referee_id != 2 or referee_id is null;
SELECT tweet_id FROM Tweets
WHERE LENGTH(content) > 15;
select 
eu.unique_id as unique_id, e.name as name
from Employees e left join EmployeeUNI eu on e.id = eu.id
select name from customer where referee_id is null or referee_id!=2;
SELECT 
    p.product_name, 
    s.year, 
    s.price
FROM 
    Sales s
JOIN 
    Product p ON s.product_id = p.product_id;
SELECT v.customer_id, COUNT(v.visit_id) AS count_no_trans 
from Visits v 
LEFT JOIN Transactions t 
ON v.visit_id = t.visit_id  
WHERE t.transaction_id IS NULL 
GROUP BY v.customer_id; 
# Write your MySQL query statement below

select customer_id , count(visit_id) as count_no_trans from Visits
where 
visit_id not in (select  visit_id from Transactions)
group by customer_id;
SELECT w1.id
FROM Weather w1, Weather w2
WHERE DATEDIFF(w1.recordDate, w2.recordDate) = 1 AND w1.temperature > w2.temperature;
select a1.machine_id, round(avg(a2.timestamp-a1.timestamp), 3) as processing_time 
from Activity a1
join Activity a2 
on a1.machine_id=a2.machine_id and a1.process_id=a2.process_id
and a1.activity_type='start' and a2.activity_type='end'
group by a1.machine_id
SELECT Employee.name,Bonus.bonus FROM Employee 
LEFT JOIN Bonus ON Employee.empID = Bonus.empID
WHERE bonus < 1000 OR Bonus IS NULL ;
SELECT
    S.student_id
    ,S.student_name
    ,SU.subject_name
    ,COUNT(E.student_id) attended_exams
FROM Students S
CROSS JOIN Subjects SU
LEFT JOIN Examinations E
    ON S.student_id = E.student_id
    AND SU.subject_name = E.subject_name

GROUP BY S.student_id, S.student_name, SU.subject_name
ORDER BY S.student_id, S.student_name, SU.subject_name
SELECT E1.name
FROM Employee E1
JOIN (
    SELECT managerId, COUNT(*) AS directReports
    FROM Employee
    GROUP BY managerId
    HAVING COUNT(*) >= 5
) E2 ON E1.id = E2.managerId;
744382
-- Write your PostgreSQL query statement below
SELECT *
FROM cinema
WHERE (id % 2) != 0
AND description NOT IN ('boring')
ORDER BY rating DESC
# Write your MySQL query statement below
SELECT P.PRODUCT_ID, IFNULL(ROUND(SUM(P.PRICE * U.UNITS) / SUM(U.UNITS), 2),0) AS AVERAGE_PRICE
FROM PRICES P LEFT JOIN UNITSSOLD U ON P.PRODUCT_ID = U.PRODUCT_ID
AND U.PURCHASE_DATE >= P.START_DATE AND U.PURCHASE_DATE <= P.END_DATE
GROUP BY P.PRODUCT_ID;
# Write your MySQL query statement below
SELECT p.project_id, ROUND(AVG(e.experience_years),2) AS average_years
FROM Project p 
LEFT JOIN Employee e
ON p.employee_id = e.employee_id
GROUP BY p.project_id
# Write your MySQL query statement below
select 
contest_id, 
round(count(distinct user_id) * 100 /(select count(user_id) from Users) ,2) as percentage
from  Register
group by contest_id
order by percentage desc,contest_id
select query_name, 
round(avg(1.0 * rating / position), 2)
as quality,
round(sum(if(rating<3, 100.0, 0)) / count(rating), 2)
as poor_query_percentage
from Queries
group by query_name
having query_name is not null;
SELECT 
    DATE_FORMAT(trans_date, '%Y-%m') AS month, 
    country, 
    COUNT(id) AS trans_count,
    SUM(IF(state = 'approved', 1, 0)) AS approved_count, 
    SUM(amount) AS trans_total_amount,
    SUM(IF(state = 'approved', amount, 0)) AS approved_total_amount
FROM 
    Transactions 
GROUP BY 
    country , 
    month;
# Write your MySQL query statement below
Select round(avg(order_date = customer_pref_delivery_date)*100, 2) as immediate_percentage
from Delivery
where (customer_id, order_date) in (
  Select customer_id, min(order_date) 
  from Delivery
  group by customer_id
);
# Write your MySQL query statement below
'SELECT
  ROUND(COUNT(DISTINCT player_id) / (SELECT COUNT(DISTINCT player_id) FROM Activity), 2) AS fraction
FROM
  Activity
WHERE
  (player_id, DATE_SUB(event_date, INTERVAL 1 DAY))
  IN (
    SELECT player_id, MIN(event_date) AS first_login FROM Activity GROUP BY player_id
  )
# Write your MySQL query statement below
Select  teacher_id ,
count(distinct subject_id ) as cnt from Teacher
group by teacher_id
select activity_date as day,count(distinct user_id) AS active_users from Activity 
where activity_date>date_sub("2019-07-27",INTERVAL 30 DAY) and activity_date <="2019-07-27" group by  activity_date
# Write your MySQL query statement below
with temp as (
    select class, count(student) as number
    from Courses
    group by class
)
select class
from temp
where number >= 5;
# Write your MySQL query statement below
SELECT user_id, COUNT(follower_id) AS followers_count
FROM Followers 
GROUP BY user_id
ORDER BY user_id;
SELECT MAX(num) AS num
FROM (
    SELECT num
    FROM MyNumbers
    GROUP BY num
    HAVING COUNT(num) = 1
) AS unique_numbers;
# Write your MySQL query statement below
select product_id,year as first_year, quantity, price
from Sales
where(product_id, year) in (select  product_id, min(year) from Sales group by product_id)
# Write your MySQL query statement below
SELECT
    e1.employee_id, 
    e1.name, 
    COUNT(e1.employee_id) as reports_count,
    ROUND(avg(e2.age)) as average_age
FROM
    Employees e1
join Employees e2 on e1.employee_id  = e2.reports_to 
GROUP BY
    e1.employee_id, 
    e1.name
ORDER BY 
    e1.employee_id
# Write your MySQL query statement below
SELECT DISTINCT employee_id, department_id
FROM Employee
WHERE primary_flag = 'Y'
   OR (primary_flag = 'N' AND employee_id IN (
       SELECT employee_id 
       FROM Employee
       GROUP BY employee_id, department_id
       HAVING COUNT(*) = 1
   ) AND employee_id NOT IN (
       SELECT employee_id
       FROM Employee
       WHERE primary_flag = 'Y'
   ));
eu.unique_id as unique_id, e.name as name
from Employees e left join EmployeeUNI eu on e.id = eu.id
select name from customer where referee_id is null or referee_id!=2;
SELECT 
    p.product_name, 
    s.year, 
# Write your MySQL query statement below

'SELECT  customer_id FROM Customer GROUP BY customer_id
HAVING COUNT(distinct product_key) = (SELECT COUNT(product_key) FROM Product)'
SELECT e1.employee_id
FROM Employees e1
LEFT JOIN Employees e2
ON e1.manager_id = e2.employee_id
WHERE e1.salary < 30000 AND e2.employee_id IS NULL AND e1.manager_id IS NOT NULL
ORDER BY employee_id;
SELECT 
    res.Department,
    res.Employee,
    res.salary
FROM (
    SELECT 
        b.name AS Department,
        a.name AS Employee,
        a.salary,
        DENSE_RANK() OVER (
            PARTITION BY a.departmentid 
            ORDER BY a.salary DESC
        ) AS rnk
    FROM employee a 
    JOIN Department b 
    ON  a.departmentid = b.id
) res
WHERE res.rnk <= 3;
with cte as (
    select num,
    lead(num,1) over() num1,
    lead(num,2) over() num2
    from logs

)

select distinct num ConsecutiveNums from cte where (num=num1) and (num=num2)
SELECT 
    IFNULL((SELECT 
				DISTINCT Salary
            FROM employee
            ORDER BY Salary DESC
            LIMIT 1 , 1),
            NULL
	) AS SecondHighestSalary
select sell_date, count( DISTINCT product ) as num_sold ,
    
    GROUP_CONCAT( DISTINCT product order by product ASC separator ',' ) as products
    
        FROM Activities GROUP BY sell_date order by sell_date ASC;

# Write your MySQL query statement below
select p.product_name, sum(o.unit) as unit from Products p join Orders o on p.product_id = o.product_id where order_date >= '2020-02-01' and order_date <= '2020-02-29' group by product_name having unit >= 100;
SELECT *
FROM Users
WHERE mail REGEXP '^[A-Za-z][A-Za-z0-9_\.\-]*@leetcode(\\?com)?\\.com$';
SELECT
    product_id
FROM
    Products
WHERE
    low_fats = 'Y' AND recyclable = 'Y'
#using nested loop 1st select all the referee_id= 2 then
# select all those without id =2.
SELECT name
FROM Customer
WHERE id NOT IN
        (
        SELECT id
        FROM Customer
        WHERE referee_id = 2

        )
# Write your MySQL query statement below
SELECT product_id
FROM Products
WHERE low_fats = 'Y' AND recyclable = 'Y';
